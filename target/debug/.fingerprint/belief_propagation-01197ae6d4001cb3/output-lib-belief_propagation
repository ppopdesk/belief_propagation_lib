{"message":"not all trait items implemented, missing: `get_log_prob`, `get_zero_pdf`, `get_log`, `update_log_prob`, `subtract`, `exponent`","code":{"code":"E0046","explanation":"Items are missing in a trait implementation.\n\nErroneous code example:\n\n```compile_fail,E0046\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {}\n// error: not all trait items implemented, missing: `foo`\n```\n\nWhen trying to make some type implement a trait `Foo`, you must, at minimum,\nprovide implementations for all of `Foo`'s required methods (meaning the\nmethods that do not have default implementations), as well as any required\ntrait items like associated types or constants. Example:\n\n```\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn foo() {} // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/variable_node.rs","byte_start":1652,"byte_end":1721,"line_start":68,"line_end":68,"column_start":1,"column_end":70,"is_primary":true,"text":[{"text":"impl<T, MsgT: Msg<T>> NodeFunction<T, MsgT> for VariableNode<T, MsgT>","highlight_start":1,"highlight_end":70}],"label":"missing `get_log_prob`, `get_zero_pdf`, `get_log`, `update_log_prob`, `subtract`, `exponent` in implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/node_function.rs","byte_start":622,"byte_end":661,"line_start":13,"line_end":13,"column_start":5,"column_end":44,"is_primary":false,"text":[{"text":"    fn get_log_prob(&self) -> Option<MsgT>;","highlight_start":5,"highlight_end":44}],"label":"`get_log_prob` from trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/node_function.rs","byte_start":666,"byte_end":705,"line_start":14,"line_end":14,"column_start":5,"column_end":44,"is_primary":false,"text":[{"text":"    fn get_zero_pdf(&self) -> Option<MsgT>;","highlight_start":5,"highlight_end":44}],"label":"`get_zero_pdf` from trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/node_function.rs","byte_start":710,"byte_end":750,"line_start":15,"line_end":15,"column_start":5,"column_end":45,"is_primary":false,"text":[{"text":"    fn get_log(&mut self, r: &MsgT) -> MsgT;","highlight_start":5,"highlight_end":45}],"label":"`get_log` from trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/node_function.rs","byte_start":755,"byte_end":805,"line_start":16,"line_end":16,"column_start":5,"column_end":55,"is_primary":false,"text":[{"text":"    fn update_log_prob(&mut self, q: &MsgT, r: &MsgT);","highlight_start":5,"highlight_end":55}],"label":"`update_log_prob` from trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/node_function.rs","byte_start":810,"byte_end":863,"line_start":17,"line_end":17,"column_start":5,"column_end":58,"is_primary":false,"text":[{"text":"    fn subtract(&mut self, p_1: MsgT, p_2: MsgT) -> MsgT;","highlight_start":5,"highlight_end":58}],"label":"`subtract` from trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/node_function.rs","byte_start":868,"byte_end":909,"line_start":18,"line_end":18,"column_start":5,"column_end":46,"is_primary":false,"text":[{"text":"    fn exponent(&mut self, p : MsgT) -> MsgT;","highlight_start":5,"highlight_end":46}],"label":"`exponent` from trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"implement the missing item: `fn get_log_prob(&self) -> Option<MsgT> { todo!() }`","code":null,"level":"help","spans":[{"file_name":"src/variable_node.rs","byte_start":6199,"byte_end":6199,"line_start":203,"line_end":203,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"}","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"fn get_log_prob(&self) -> Option<MsgT> { todo!() }\n","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null},{"message":"implement the missing item: `fn get_zero_pdf(&self) -> Option<MsgT> { todo!() }`","code":null,"level":"help","spans":[{"file_name":"src/variable_node.rs","byte_start":6199,"byte_end":6199,"line_start":203,"line_end":203,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"}","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"fn get_zero_pdf(&self) -> Option<MsgT> { todo!() }\n","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null},{"message":"implement the missing item: `fn get_log(&mut self, _: &MsgT) -> MsgT { todo!() }`","code":null,"level":"help","spans":[{"file_name":"src/variable_node.rs","byte_start":6199,"byte_end":6199,"line_start":203,"line_end":203,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"}","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"fn get_log(&mut self, _: &MsgT) -> MsgT { todo!() }\n","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null},{"message":"implement the missing item: `fn update_log_prob(&mut self, _: &MsgT, _: &MsgT) { todo!() }`","code":null,"level":"help","spans":[{"file_name":"src/variable_node.rs","byte_start":6199,"byte_end":6199,"line_start":203,"line_end":203,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"}","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"fn update_log_prob(&mut self, _: &MsgT, _: &MsgT) { todo!() }\n","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null},{"message":"implement the missing item: `fn subtract(&mut self, _: MsgT, _: MsgT) -> MsgT { todo!() }`","code":null,"level":"help","spans":[{"file_name":"src/variable_node.rs","byte_start":6199,"byte_end":6199,"line_start":203,"line_end":203,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"}","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"fn subtract(&mut self, _: MsgT, _: MsgT) -> MsgT { todo!() }\n","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null},{"message":"implement the missing item: `fn exponent(&mut self, _: MsgT) -> MsgT { todo!() }`","code":null,"level":"help","spans":[{"file_name":"src/variable_node.rs","byte_start":6199,"byte_end":6199,"line_start":203,"line_end":203,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"}","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"fn exponent(&mut self, _: MsgT) -> MsgT { todo!() }\n","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0046]\u001b[0m\u001b[0m\u001b[1m: not all trait items implemented, missing: `get_log_prob`, `get_zero_pdf`, `get_log`, `update_log_prob`, `subtract`, `exponent`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/variable_node.rs:68:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<T, MsgT: Msg<T>> NodeFunction<T, MsgT> for VariableNode<T, MsgT>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `get_log_prob`, `get_zero_pdf`, `get_log`, `update_log_prob`, `subtract`, `exponent` in implementation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/node_function.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn get_log_prob(&self) -> Option<MsgT>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`get_log_prob` from trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn get_zero_pdf(&self) -> Option<MsgT>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`get_zero_pdf` from trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn get_log(&mut self, r: &MsgT) -> MsgT;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`get_log` from trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn update_log_prob(&mut self, q: &MsgT, r: &MsgT);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`update_log_prob` from trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn subtract(&mut self, p_1: MsgT, p_2: MsgT) -> MsgT;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`subtract` from trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn exponent(&mut self, p : MsgT) -> MsgT;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`exponent` from trait\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0046`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0046`.\u001b[0m\n"}
